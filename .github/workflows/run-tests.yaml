name: Java CI

on:
  push:
  pull_request:
  workflow_dispatch:

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v3
        with:
          java-version: '21'
          distribution: 'temurin'

      - name: Create directories
        run: mkdir -p lib bin test-results coverage-reports

      - name: Download dependencies
        run: |
          wget -P lib/ https://repo1.maven.org/maven2/org/junit/platform/junit-platform-console-standalone/1.9.2/junit-platform-console-standalone-1.9.2.jar
          wget -P lib/ https://repo1.maven.org/maven2/org/jacoco/org.jacoco.cli/0.8.11/org.jacoco.cli-0.8.11-nodeps.jar
          wget -P lib/ https://repo1.maven.org/maven2/org/jacoco/org.jacoco.agent/0.8.11/org.jacoco.agent-0.8.11-runtime.jar

      - name: Compile source files
        run: javac -d bin --release 21 --enable-preview -cp "lib/*:src" $(find src -name "*.java")

      - name: Compile test files
        run: javac -d bin --release 21 --enable-preview -cp "bin:lib/*" $(find tests -name "*.java")

      - name: Run tests with coverage
        run: |
          java --enable-preview -javaagent:lib/org.jacoco.agent-0.8.11-runtime.jar=destfile=coverage-reports/jacoco.exec \
               -jar lib/junit-platform-console-standalone-1.9.2.jar \
               --class-path bin --scan-class-path --include-classname=.*Test --reports-dir test-results

      - name: Generate Coverage Report
        run: java -jar lib/org.jacoco.cli-0.8.11-nodeps.jar report coverage-reports/jacoco.exec \
          --classfiles bin --sourcefiles src --xml coverage-reports/coverage.xml

      - name: Create Test Summary
        uses: actions/github-script@v6
        with:
          script: |
            const core = require('@actions/core');
            const fs = require('fs');

            // Read JUnit results
            const junitResults = fs.readFileSync('test-results/TEST-junit-jupiter.xml', 'utf8');
            const junitParser = require('fast-xml-parser');
            const junitData = junitParser.parse(junitResults);

            // Extract JUnit summary
            const tests = junitData.testsuite.tests;
            const failures = junitData.testsuite.failures;

            // Read JaCoCo coverage results
            const jacocoResults = fs.readFileSync('coverage-reports/coverage.xml', 'utf8');
            const jacocoParser = require('fast-xml-parser');
            const jacocoData = jacocoParser.parse(jacocoResults);

            const coverage = jacocoData.report.counter.find(c => c.type === 'LINE').covered;
            const total = jacocoData.report.counter.find(c => c.type === 'LINE').missed + coverage;
            const coveragePercent = ((coverage / total) * 100).toFixed(2);

            // Create the summary
            const summary = `
  ### Test Results
  - Total Tests: ${tests}
  - Failures: ${failures}

  ### Code Coverage
  - Line Coverage: ${coveragePercent}%
  `;
  
  core.info(summary);
  core.summary.addRaw(summary).write();
