name: Java CI

on:
  push:
    #    branches:
    #      - main
    #      - dev

  pull_request:
  workflow_dispatch: # allows us to manually run the actions

jobs:
  test:
    runs-on: ubuntu-latest
    permissions: write-all

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v3
        with:
          java-version: '21'
          distribution: 'temurin'

      - name: Create directories
        run: |
          mkdir -p lib
          mkdir -p bin
          mkdir -p test-results
          mkdir -p coverage-reports

      - name: Download dependencies
        run: |
          wget -P lib/ https://repo1.maven.org/maven2/org/junit/platform/junit-platform-console-standalone/1.9.2/junit-platform-console-standalone-1.9.2.jar
          wget -P lib/ https://repo1.maven.org/maven2/org/jacoco/org.jacoco.cli/0.8.11/org.jacoco.cli-0.8.11-nodeps.jar
          wget -P lib/ https://repo1.maven.org/maven2/org/jacoco/org.jacoco.agent/0.8.11/org.jacoco.agent-0.8.11-runtime.jar

      - name: Compile source files
        run: |
          javac -d bin \
                --release 21 \
                --enable-preview \
                -cp "lib/*:src" \
                $(find src -name "*.java")

      - name: Compile test files
        run: |
          javac -d bin \
                --release 21 \
                --enable-preview \
                -cp "bin:lib/*" \
                $(find tests -name "*.java")

      - name: Run tests with coverage
        run: |
          java --enable-preview \
               -javaagent:lib/org.jacoco.agent-0.8.11-runtime.jar=destfile=coverage-reports/jacoco.exec \
               -jar lib/junit-platform-console-standalone-1.9.2.jar \
               --class-path bin \
               --scan-class-path \
               --include-classname=.*Test \
               --reports-dir test-results

      - name: Generate coverage report
        run: |
          java -jar lib/org.jacoco.cli-0.8.11-nodeps.jar report coverage-reports/jacoco.exec \
               --classfiles bin \
               --sourcefiles src \
               --html coverage-reports/html \
               --xml coverage-reports/coverage.xml

      - name: Generate Execution Summary
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');

            // Read JUnit test results
            const junitFilePath = 'test-results/TEST-junit-jupiter.xml';
            const junitData = fs.readFileSync(junitFilePath, 'utf-8');
            const junitMatches = junitData.match(/tests="(\d+)" failures="(\d+)" errors="(\d+)"/);
            const totalTests = junitMatches ? junitMatches[1] : 'N/A';
            const failures = junitMatches ? junitMatches[2] : 'N/A';
            const errors = junitMatches ? junitMatches[3] : 'N/A';

            // Read JaCoCo coverage report
            const jacocoFilePath = 'coverage-reports/coverage.xml';
            const jacocoData = fs.readFileSync(jacocoFilePath, 'utf-8');
            const lineCoverageMatch = jacocoData.match(/<counter type="LINE" missed="(\d+)" covered="(\d+)"\/>/);
            const missedLines = lineCoverageMatch ? parseInt(lineCoverageMatch[1]) : 0;
            const coveredLines = lineCoverageMatch ? parseInt(lineCoverageMatch[2]) : 0;
            const totalLines = missedLines + coveredLines;
            const coveragePercentage = totalLines > 0 ? ((coveredLines / totalLines) * 100).toFixed(2) : 'N/A';

            // Create a combined summary
            const summary = `
            ### Test Results
            - **Total Tests**: ${totalTests}
            - **Failures**: ${failures}
            - **Errors**: ${errors}
            
            ### Code Coverage
            - **Line Coverage**: ${coveragePercentage}%
            - **Total Lines**: ${totalLines}
            - **Covered Lines**: ${coveredLines}
            - **Missed Lines**: ${missedLines}
            `;
            
            // Add summary to GitHub Actions "Summary" tab
            core.summary.addRaw(summary).write();
