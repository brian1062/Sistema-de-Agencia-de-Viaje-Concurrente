name: Java CI

on:
  push:
    #    branches:
    #      - main
    #      - dev

  pull_request:
  workflow_dispatch: # allows us to manually run the actions

jobs:
  test:
    runs-on: ubuntu-latest
    permissions: write-all

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v3
        with:
          java-version: '21'
          distribution: 'temurin'

      - name: Create directories
        run: |
          mkdir -p lib
          mkdir -p bin
          mkdir -p test-results
          mkdir -p coverage-reports

      - name: Download dependencies
        run: |
          wget -P lib/ https://repo1.maven.org/maven2/org/junit/platform/junit-platform-console-standalone/1.9.2/junit-platform-console-standalone-1.9.2.jar
          wget -P lib/ https://repo1.maven.org/maven2/org/jacoco/org.jacoco.cli/0.8.11/org.jacoco.cli-0.8.11-nodeps.jar
          wget -P lib/ https://repo1.maven.org/maven2/org/jacoco/org.jacoco.agent/0.8.11/org.jacoco.agent-0.8.11-runtime.jar

      - name: Compile source files
        run: |
          javac -d bin \
                --release 21 \
                --enable-preview \
                -cp "lib/*:src" \
                $(find src -name "*.java")

      - name: Compile test files
        run: |
          javac -d bin \
                --release 21 \
                --enable-preview \
                -cp "bin:lib/*" \
                $(find tests -name "*.java")

      - name: Run tests with coverage
        run: |
          java --enable-preview \
               -javaagent:lib/org.jacoco.agent-0.8.11-runtime.jar=destfile=coverage-reports/jacoco.exec \
               -jar lib/junit-platform-console-standalone-1.9.2.jar \
               --class-path bin \
               --scan-class-path \
               --include-classname=.*Test \
               --reports-dir test-results

      - name: Generate coverage report
        run: |
          java -jar lib/org.jacoco.cli-0.8.11-nodeps.jar report coverage-reports/jacoco.exec \
               --classfiles bin \
               --sourcefiles src \
               --html coverage-reports/html \
               --xml coverage-reports/coverage.xml

      - name: Parse JaCoCo Report
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');
            const xml2js = require('xml2js');
            const util = require('util');
            
            async function parseJacocoCoverage() {
              try {
                const jacocoFilePath = 'coverage-reports/coverage.xml';
            
                // Verificar si existe el archivo
                if (!fs.existsSync(jacocoFilePath)) {
                  throw new Error('JaCoCo report not found at: ' + jacocoFilePath);
                }
            
                // Leer el archivo XML
                const xmlData = fs.readFileSync(jacocoFilePath, 'utf-8');
            
                // Parsear XML a JSON
                const parser = new xml2js.Parser();
                const parseXml = util.promisify(parser.parseString);
                const result = await parseXml(xmlData);
            
                // Extraer los contadores del reporte
                const report = result.report;
                let totalMissed = 0;
                let totalCovered = 0;
            
                // Función recursiva para sumar contadores de líneas
                function sumLineCounters(element) {
                  if (element.counter) {
                    const lineCounters = element.counter.filter(c => c.$.type === 'LINE');
                    for (const counter of lineCounters) {
                      totalMissed += parseInt(counter.$.missed || 0);
                      totalCovered += parseInt(counter.$.covered || 0);
                    }
                  }
            
                  // Recursivamente procesar todos los elementos hijos
                  for (const key in element) {
                    if (Array.isArray(element[key])) {
                      element[key].forEach(child => {
                        if (typeof child === 'object') {
                          sumLineCounters(child);
                        }
                      });
                    }
                  }
                }
            
                // Comenzar el procesamiento desde la raíz
                sumLineCounters(report);
            
                // Calcular métricas
                const totalLines = totalMissed + totalCovered;
                const coveragePercentage = totalLines > 0 
                  ? ((totalCovered / totalLines) * 100).toFixed(2)
                  : '0.00';
            
                // Generar resumen
                const summary = `
                ### JaCoCo Code Coverage Report
                - **Line Coverage**: ${coveragePercentage}%
                - **Total Lines**: ${totalLines}
                - **Covered Lines**: ${totalCovered}
                - **Missed Lines**: ${totalMissed}
                `;
            
                // Logging para debug
                console.log('Coverage Analysis Results:');
                console.log(`Total Lines: ${totalLines}`);
                console.log(`Covered Lines: ${totalCovered}`);
                console.log(`Missed Lines: ${totalMissed}`);
                console.log(`Coverage Percentage: ${coveragePercentage}%`);
            
                // Escribir el resumen en GitHub Actions
                await core.summary.addRaw(summary).write();
            
                // Opcional: Establecer output para usar en otros steps
                core.setOutput('coverage-percentage', coveragePercentage);
                core.setOutput('total-lines', totalLines);
                core.setOutput('covered-lines', totalCovered);
                core.setOutput('missed-lines', totalMissed);
            
                // Opcional: Fallar el workflow si la cobertura es muy baja
                const minimumCoverage = 60; // Ajusta según tus necesidades
                if (parseFloat(coveragePercentage) < minimumCoverage) {
                  core.setFailed(`Coverage ${coveragePercentage}% is below minimum ${minimumCoverage}%`);
                }
            
              } catch (error) {
                console.error('Error processing JaCoCo report:', error);
                core.setFailed(error.message);
              }
            }
            
            // Ejecutar el análisis
            await parseJacocoCoverage();

